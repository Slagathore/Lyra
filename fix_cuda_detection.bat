@echo off
cd /d %~dp0
setlocal enabledelayedexpansion

echo ==== CUDA Detection and Optimization Utility ====
echo.

REM Check if we're running with administrative privileges
net session >nul 2>&1
if %errorLevel% == 0 (
    echo Running with administrative privileges. Good!
) else (
    echo Warning: This script is not running with administrative privileges.
    echo Some optimizations may not be applied.
    echo.
    echo Please consider running this script as Administrator.
    echo.
    pause
)

echo Detecting NVIDIA drivers and CUDA installation...
echo.

REM Check for NVIDIA drivers
nvidia-smi >nul 2>&1
if %errorLevel% NEQ 0 (
    echo ERROR: NVIDIA drivers not detected or nvidia-smi isn't working.
    echo Please install the latest NVIDIA drivers from:
    echo https://www.nvidia.com/download/index.aspx
    goto :end
) else (
    echo NVIDIA drivers detected. Getting details...
    for /f "tokens=3" %%a in ('nvidia-smi ^| findstr "Driver Version"') do set DRIVER_VERSION=%%a
    echo Driver Version: %DRIVER_VERSION%
)

REM Check for CUDA toolkit
nvcc --version >nul 2>&1
if %errorLevel% NEQ 0 (
    echo CUDA toolkit not detected in PATH.
    echo.
    echo Checking common CUDA installation locations...
    
    set CUDA_FOUND=0
    for %%v in (12.1 12.0 11.8 11.7 11.6 11.5 11.4 11.3 11.2 11.1 11.0 10.2) do (
        if exist "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v%%v\bin\nvcc.exe" (
            echo Found CUDA v%%v at "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v%%v"
            set CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v%%v
            set CUDA_VERSION=%%v
            set CUDA_FOUND=1
            goto :cuda_found
        )
    )
    
    :cuda_found
    if !CUDA_FOUND! EQU 0 (
        echo.
        echo WARNING: CUDA toolkit not found.
        echo Consider installing CUDA toolkit from:
        echo https://developer.nvidia.com/cuda-downloads
        echo.
        echo Will continue with limited functionality.
    ) else (
        echo Adding CUDA to PATH temporarily for this session...
        set PATH=!CUDA_PATH!\bin;!PATH!
        echo CUDA VERSION: !CUDA_VERSION!
    )
) else (
    for /f "tokens=* usebackq" %%a in (`nvcc --version ^| findstr "release"`) do (
        set NVCC_VERSION=%%a
    )
    echo !NVCC_VERSION!
)

echo.
echo Checking GPU capabilities...
echo.

REM Run detailed GPU check using Python
python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA device count: {torch.cuda.device_count()}'); print(f'CUDA version: {torch.version.cuda if torch.cuda.is_available() else \"N/A\"}'); [print(f'Device {i}: {torch.cuda.get_device_name(i)}, Capability: {torch.cuda.get_device_capability(i)}') for i in range(torch.cuda.device_count())]" 2>nul

if %errorLevel% NEQ 0 (
    echo Failed to run PyTorch GPU check.
    echo Installing PyTorch...
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
    
    echo Checking again with PyTorch...
    python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA device count: {torch.cuda.device_count()}'); print(f'CUDA version: {torch.version.cuda if torch.cuda.is_available() else \"N/A\"}');"
)

echo.
echo Setting up optimal CUDA environment variables...
echo.

REM Create a permanent environment variable setup script
echo @echo off > setup_cuda_env.bat
echo REM Auto-generated by fix_cuda_detection.bat >> setup_cuda_env.bat
echo. >> setup_cuda_env.bat
echo REM CUDA environment variables for optimal performance >> setup_cuda_env.bat
echo setx CUDA_VISIBLE_DEVICES 0 >> setup_cuda_env.bat
echo setx CUDA_DEVICE_ORDER PCI_BUS_ID >> setup_cuda_env.bat
echo setx GGML_CUDA_NO_PINNED 1 >> setup_cuda_env.bat
echo setx GGML_CUDA_FORCE_MMQ 1 >> setup_cuda_env.bat
echo setx GGML_CUDA_MEM_PERCENT 90 >> setup_cuda_env.bat
echo setx GGML_CUDA_DMMV_X 32 >> setup_cuda_env.bat
echo setx GGML_CUDA_MMV_Y 1 >> setup_cuda_env.bat
echo. >> setup_cuda_env.bat
echo echo CUDA environment variables set successfully! >> setup_cuda_env.bat
echo echo Please restart your command prompt for changes to take effect. >> setup_cuda_env.bat
echo pause >> setup_cuda_env.bat

echo Running environment variable setup script...
call setup_cuda_env.bat

echo.
echo Optimizing llama-cpp-python installation for CUDA...
echo.

REM Install the CUDA-optimized version of llama-cpp-python
echo Setting up build flags for optimal CUDA support...
set CMAKE_ARGS=-DLLAMA_CUBLAS=on
set FORCE_CMAKE=1
pip install --upgrade --force-reinstall llama-cpp-python==0.3.8+cu121 --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cu121

echo.
echo Testing GPU support in llama-cpp-python...
python -c "from llama_cpp import Llama; print(f'llama-cpp-python supports GPU offload: {Llama.supports_gpu_offload()}')"

echo.
echo Optimization completed!
echo.
echo Next steps:
echo 1. Restart your command prompt for environment variables to take effect
echo 2. Run setup_cuda_llm.bat to verify GPU is properly detected
echo 3. Run run_gpu_llm.bat with optimized settings
echo.

:end
pause
